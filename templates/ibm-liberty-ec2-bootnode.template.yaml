AWSTemplateFormatVersion: 2010-09-09
Description: This template creates an EC2 instance which is used to run eksctl and kubectl. (qs-1tdrmii5o)
Metadata:
  ParameterLabels:
      RoleName:
        default: Role name
Parameters:
  RoleName:
    Description: The name of the role to attach to the boot node
    Type: String
  BootNodeName:
    Type: String
  PublicSubnet1ID:
    Description: The ID of the public subnet in Availability Zone 1 for the boot node and EKS cluster (for example, "subnet-9bc642ac").
    Type: String
  PublicSubnet2ID:
    Description: The ID of the public subnet in Availability Zone 2 for the EKS cluster (for example, "subnet-9bc642ac").
    Type: String
  PublicSubnet3ID:
    Description: The ID of the public subnet in Availability Zone 3 for the EKS cluster (for example, "subnet-9bc642ac").
    Type: String
  PrivateSubnet1ID:
    Description: The ID of the private subnet in Availability Zone 1 for the EKS cluster (for example, "subnet-9bc642ac").
    Type: String
  PrivateSubnet2ID:
    Description: The ID of the private subnet in Availability Zone 2 for the EKS cluster (for example, "subnet-9bc642ac").
    Type: String
  PrivateSubnet3ID:
    Description: The ID of the private subnet in Availability Zone 3 for the EKS cluster (for example, "subnet-9bc642ac").
    Type: String
  AvailabilityZone1:
    Description: The name of the Availability Zone 1 for the EKS cluster (for example, "ca-central-1a").
    Type: String
  AvailabilityZone2:
    Description: The name of the Availability Zone 2 for the EKS cluster (for example, "ca-central-1b").
    Type: String
  AvailabilityZone3:
    Description: The name of the Availability Zone 3 for the EKS cluster (for example, "ca-central-1d").
    Type: String
  EKSClusterName:
    Type: String
    Description: Name of the new EKS cluster (length 2-250) (required). The name must start with a letter and contain only lowercase letters, numbers, hyphens, underscores, periods, and forward slashes.
    MinLength: 2
    MaxLength: 250
    AllowedPattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
    ConstraintDescription: The name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, periods and forward slashes.
Mappings:
  AWSAMIRegionMap:
    af-south-1:
      AMZNLINUX2: ami-0936d2754993c364e
    ap-northeast-1:
      AMZNLINUX2: ami-0ca38c7440de1749a
    ap-northeast-2:
      AMZNLINUX2: ami-0f2c95e9fe3f8f80e
    ap-northeast-3:
      AMZNLINUX2: ami-06e9ad0943b200859
    ap-south-1:
      AMZNLINUX2: ami-010aff33ed5991201
    ap-southeast-1:
      AMZNLINUX2: ami-02f26adf094f51167
    ap-southeast-2:
      AMZNLINUX2: ami-0186908e2fdeea8f3
    ca-central-1:
      AMZNLINUX2: ami-0101734ab73bd9e15
    eu-central-1:
      AMZNLINUX2: ami-043097594a7df80ec
    me-south-1:
      AMZNLINUX2: ami-0880769bc15eeec4f
    ap-east-1:
      AMZNLINUX2: ami-0aca22cb23f122f27
    eu-north-1:
      AMZNLINUX2: ami-050fdc53cf6ba8f7f
    eu-south-1:
      AMZNLINUX2: ami-0f447354763f0eaac
    eu-west-1:
      AMZNLINUX2: ami-063d4ab14480ac177
    eu-west-2:
      AMZNLINUX2: ami-06dc09bb8854cbde3
    eu-west-3:
      AMZNLINUX2: ami-0b3e57ee3b63dd76b
    sa-east-1:
      AMZNLINUX2: ami-05373777d08895384
    us-east-1:
      AMZNLINUX2: ami-0d5eff06f840b45e9
    us-gov-west-1:
      AMZNLINUX2: ami-0bbf3595bb2fb39ec
    us-gov-east-1:
      AMZNLINUX2: ami-0cc17d57bec8c6017
    us-east-2:
      AMZNLINUX2: ami-077e31c4939f6a2f3
    us-west-1:
      AMZNLINUX2: ami-04468e03c37242e1e
    us-west-2:
      AMZNLINUX2: ami-0cf6f5c8a62fa5da6
    cn-north-1:
      AMZNLINUX2: ami-0c52e2685c7218558
    cn-northwest-1:
      AMZNLINUX2: ami-05b9b6d6acf8ae9b6
Resources:
  BootNodeProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RoleName
      Path: /
  BootNode:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Required:
            - StackPropertiesFile
        StackPropertiesFile:
          files:
            /tmp/cluster.yaml:
              mode: '000755'
              owner: root
              group: root
              content:
                !Sub
                - |
                  apiVersion: eksctl.io/v1alpha5
                  kind: ClusterConfig
                  metadata:
                    name: ${ClusterName}
                    region: ${AWS::Region}
                  vpc:
                    subnets:
                      private:
                        ${AZ1}: { id: ${PrivateSubnet1ID} }
                        ${AZ2}: { id: ${PrivateSubnet2ID} }
                        ${AZ3}: { id: ${PrivateSubnet3ID} }
                      public:
                        ${AZ1}: { id: ${PublicSubnet1ID} }
                        ${AZ2}: { id: ${PublicSubnet2ID} }
                        ${AZ3}: { id: ${PublicSubnet3ID} }
                  nodeGroups:
                    - name: ng-1-workers
                      labels: { role: workers }
                      instanceType: m5.large
                      desiredCapacity: 2
                - AZ1: !Ref AvailabilityZone1
                  AZ2: !Ref AvailabilityZone2
                  AZ3: !Ref AvailabilityZone3
                  PrivateSubnet1ID: !Ref PrivateSubnet1ID
                  PrivateSubnet2ID: !Ref PrivateSubnet2ID
                  PrivateSubnet3ID: !Ref PrivateSubnet3ID
                  PublicSubnet1ID: !Ref PublicSubnet1ID
                  PublicSubnet2ID: !Ref PublicSubnet2ID
                  PublicSubnet3ID: !Ref PublicSubnet3ID
                  ClusterName: !Ref EKSClusterName

    Properties:
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", AMZNLINUX2]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref BootNodeProfile
      SubnetId: !Ref PublicSubnet1ID
      Tags:
        - Key: "Name"
          Value:  !Ref BootNodeName
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BootNode --configsets Required --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BootNode --region ${AWS::Region}
Outputs:
  InstanceId:
    Description: The instance ID of the boot node
    Value: !Ref BootNode
  InstanceName:
    Description: The name of the boot node
    Value: !Ref BootNodeName
  User:
    Description: The user of the boot node
    Value: "ec2-user"
